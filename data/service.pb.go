// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package data is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	ImportRequest
	ImportReply
	UploadRequest
	UploadReply
	DescribeRequest
	DescribeReply
	UpdateRequest
	UpdateReply
	GetRequest
	GetReply
*/
package data

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type State int32

const (
	State_UNKNOWN    State = 0
	State_CREATED    State = 1
	State_INPROGRESS State = 2
	State_ERROR      State = 3
	State_DONE       State = 4
)

var State_name = map[int32]string{
	0: "UNKNOWN",
	1: "CREATED",
	2: "INPROGRESS",
	3: "ERROR",
	4: "DONE",
}
var State_value = map[string]int32{
	"UNKNOWN":    0,
	"CREATED":    1,
	"INPROGRESS": 2,
	"ERROR":      3,
	"DONE":       4,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}
func (State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// ImportRequest is a request to import data from a remote location.
// Returned is a unique id of the data to be imported. The actual import
// is asynchronous, but this id can be used to check the state.
type ImportRequest struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *ImportRequest) Reset()                    { *m = ImportRequest{} }
func (m *ImportRequest) String() string            { return proto.CompactTextString(m) }
func (*ImportRequest) ProtoMessage()               {}
func (*ImportRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ImportRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type ImportReply struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ImportReply) Reset()                    { *m = ImportReply{} }
func (m *ImportReply) String() string            { return proto.CompactTextString(m) }
func (*ImportReply) ProtoMessage()               {}
func (*ImportReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ImportReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// UploadRequest is request to upload data. It returns a unique data
// id and a pre-signed URL the client can use to PUT the data to.
type UploadRequest struct {
}

func (m *UploadRequest) Reset()                    { *m = UploadRequest{} }
func (m *UploadRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadRequest) ProtoMessage()               {}
func (*UploadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type UploadReply struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	SignedUrl string `protobuf:"bytes,2,opt,name=signed_url,json=signedUrl" json:"signed_url,omitempty"`
}

func (m *UploadReply) Reset()                    { *m = UploadReply{} }
func (m *UploadReply) String() string            { return proto.CompactTextString(m) }
func (*UploadReply) ProtoMessage()               {}
func (*UploadReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UploadReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UploadReply) GetSignedUrl() string {
	if m != nil {
		return m.SignedUrl
	}
	return ""
}

// DescribeRequest takes a data id for returns information about the data.
type DescribeRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DescribeRequest) Reset()                    { *m = DescribeRequest{} }
func (m *DescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*DescribeRequest) ProtoMessage()               {}
func (*DescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DescribeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DescribeReply struct {
	// Unique ID of the data record.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The time the data record was initially created.
	CreateTime int64 `protobuf:"varint,2,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// State is the state of the data.
	State State `protobuf:"varint,3,opt,name=state,enum=data.State" json:"state,omitempty"`
	// Error is an error that occurred during import.
	Error string `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	// The URL of the data being imported.
	ImportUrl string `protobuf:"bytes,6,opt,name=import_url,json=importUrl" json:"import_url,omitempty"`
	// Time the import started. Note, there is no upload start time
	ImportTime int64 `protobuf:"varint,7,opt,name=import_time,json=importTime" json:"import_time,omitempty"`
	// Time the object was successfully put into storage.
	PutTime int64 `protobuf:"varint,8,opt,name=put_time,json=putTime" json:"put_time,omitempty"`
	// Hash of the object.
	Hash string `protobuf:"bytes,9,opt,name=hash" json:"hash,omitempty"`
	// Size of the object in bytes.
	Size int64 `protobuf:"varint,10,opt,name=size" json:"size,omitempty"`
	// The mediatype of the object if detected.
	Mediatype string `protobuf:"bytes,11,opt,name=mediatype" json:"mediatype,omitempty"`
	// The compression method used if any.
	Compression  string `protobuf:"bytes,12,opt,name=compression" json:"compression,omitempty"`
	ModifiedTime int64  `protobuf:"varint,13,opt,name=modified_time,json=modifiedTime" json:"modified_time,omitempty"`
}

func (m *DescribeReply) Reset()                    { *m = DescribeReply{} }
func (m *DescribeReply) String() string            { return proto.CompactTextString(m) }
func (*DescribeReply) ProtoMessage()               {}
func (*DescribeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DescribeReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DescribeReply) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *DescribeReply) GetState() State {
	if m != nil {
		return m.State
	}
	return State_UNKNOWN
}

func (m *DescribeReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *DescribeReply) GetImportUrl() string {
	if m != nil {
		return m.ImportUrl
	}
	return ""
}

func (m *DescribeReply) GetImportTime() int64 {
	if m != nil {
		return m.ImportTime
	}
	return 0
}

func (m *DescribeReply) GetPutTime() int64 {
	if m != nil {
		return m.PutTime
	}
	return 0
}

func (m *DescribeReply) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *DescribeReply) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *DescribeReply) GetMediatype() string {
	if m != nil {
		return m.Mediatype
	}
	return ""
}

func (m *DescribeReply) GetCompression() string {
	if m != nil {
		return m.Compression
	}
	return ""
}

func (m *DescribeReply) GetModifiedTime() int64 {
	if m != nil {
		return m.ModifiedTime
	}
	return 0
}

// UpdateRequest updates the state of the object. Once the object
// is in the DONE state, no more updates can be made.
type UpdateRequest struct {
	// ID of the object.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// State is the state of the data.
	State State `protobuf:"varint,2,opt,name=state,enum=data.State" json:"state,omitempty"`
	// Error is an error that occurred during import.
	Error string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	// Time the import began.
	ImportTime int64 `protobuf:"varint,8,opt,name=import_time,json=importTime" json:"import_time,omitempty"`
	// Time the object was successfully put into storage.
	PutTime int64 `protobuf:"varint,4,opt,name=put_time,json=putTime" json:"put_time,omitempty"`
	// Hash of the object.
	Hash string `protobuf:"bytes,5,opt,name=hash" json:"hash,omitempty"`
	// Size of the object in bytes.
	Size int64 `protobuf:"varint,6,opt,name=size" json:"size,omitempty"`
	// Mediatype.
	Mediatype string `protobuf:"bytes,7,opt,name=mediatype" json:"mediatype,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateRequest) GetState() State {
	if m != nil {
		return m.State
	}
	return State_UNKNOWN
}

func (m *UpdateRequest) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *UpdateRequest) GetImportTime() int64 {
	if m != nil {
		return m.ImportTime
	}
	return 0
}

func (m *UpdateRequest) GetPutTime() int64 {
	if m != nil {
		return m.PutTime
	}
	return 0
}

func (m *UpdateRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *UpdateRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *UpdateRequest) GetMediatype() string {
	if m != nil {
		return m.Mediatype
	}
	return ""
}

type UpdateReply struct {
}

func (m *UpdateReply) Reset()                    { *m = UpdateReply{} }
func (m *UpdateReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateReply) ProtoMessage()               {}
func (*UpdateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// GetRequest requests a pre-signed URL for downloading the data.
type GetRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetReply struct {
	SignedUrl string `protobuf:"bytes,1,opt,name=signed_url,json=signedUrl" json:"signed_url,omitempty"`
	Mediatype string `protobuf:"bytes,2,opt,name=mediatype" json:"mediatype,omitempty"`
	Size      int64  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
}

func (m *GetReply) Reset()                    { *m = GetReply{} }
func (m *GetReply) String() string            { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()               {}
func (*GetReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetReply) GetSignedUrl() string {
	if m != nil {
		return m.SignedUrl
	}
	return ""
}

func (m *GetReply) GetMediatype() string {
	if m != nil {
		return m.Mediatype
	}
	return ""
}

func (m *GetReply) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func init() {
	proto.RegisterType((*ImportRequest)(nil), "data.ImportRequest")
	proto.RegisterType((*ImportReply)(nil), "data.ImportReply")
	proto.RegisterType((*UploadRequest)(nil), "data.UploadRequest")
	proto.RegisterType((*UploadReply)(nil), "data.UploadReply")
	proto.RegisterType((*DescribeRequest)(nil), "data.DescribeRequest")
	proto.RegisterType((*DescribeReply)(nil), "data.DescribeReply")
	proto.RegisterType((*UpdateRequest)(nil), "data.UpdateRequest")
	proto.RegisterType((*UpdateReply)(nil), "data.UpdateReply")
	proto.RegisterType((*GetRequest)(nil), "data.GetRequest")
	proto.RegisterType((*GetReply)(nil), "data.GetReply")
	proto.RegisterEnum("data.State", State_name, State_value)
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 562 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0x1f, 0x49, 0x9c, 0x71, 0x9d, 0x9a, 0x2d, 0x48, 0x26, 0x6a, 0x45, 0x62, 0x0e, 0x54,
	0x1c, 0xa2, 0xaa, 0x48, 0x9c, 0xb8, 0x20, 0x12, 0xa2, 0x0a, 0x29, 0x41, 0x4e, 0x23, 0x0e, 0x1c,
	0x2a, 0x37, 0x1e, 0xe8, 0x4a, 0x76, 0xbd, 0xac, 0x37, 0x48, 0xe1, 0xc4, 0xef, 0xe4, 0xc6, 0x3f,
	0x41, 0xbb, 0x1b, 0xc7, 0x89, 0xe5, 0xc2, 0x6d, 0xfd, 0xde, 0x7a, 0xde, 0xf3, 0x9b, 0x19, 0x83,
	0x57, 0x20, 0xff, 0x41, 0x57, 0x38, 0x62, 0x3c, 0x17, 0x39, 0xb1, 0x93, 0x58, 0xc4, 0xe1, 0x10,
	0xbc, 0xab, 0x8c, 0xe5, 0x5c, 0x44, 0xf8, 0x7d, 0x8d, 0x85, 0x20, 0x3e, 0x58, 0x6b, 0x9e, 0x06,
	0xc6, 0xc0, 0x38, 0xef, 0x46, 0xf2, 0x18, 0x9e, 0x81, 0x5b, 0x5e, 0x61, 0xe9, 0x86, 0xf4, 0xc0,
	0xa4, 0xc9, 0x96, 0x37, 0x69, 0x12, 0x1e, 0x83, 0xb7, 0x64, 0x69, 0x1e, 0x27, 0xdb, 0x0a, 0xe1,
	0x5b, 0x70, 0x4b, 0xa0, 0xe1, 0x3e, 0x39, 0x03, 0x28, 0xe8, 0xb7, 0x7b, 0x4c, 0x6e, 0xa4, 0x8e,
	0xa9, 0xf0, 0xae, 0x46, 0x96, 0x3c, 0x0d, 0x87, 0x70, 0x3c, 0xc6, 0x62, 0xc5, 0xe9, 0x2d, 0x96,
	0x96, 0xea, 0x8a, 0x7f, 0x4c, 0xf0, 0xaa, 0x3b, 0x4d, 0x1a, 0xcf, 0xc1, 0x5d, 0x71, 0x8c, 0x05,
	0xde, 0x08, 0x9a, 0xa1, 0x12, 0xb1, 0x22, 0xd0, 0xd0, 0x35, 0xcd, 0x90, 0x0c, 0xa1, 0x55, 0x88,
	0x58, 0x60, 0x60, 0x0d, 0x8c, 0xf3, 0xde, 0xa5, 0x3b, 0x92, 0x61, 0x8c, 0x16, 0x12, 0x8a, 0x34,
	0x43, 0x9e, 0x40, 0x0b, 0x39, 0xcf, 0x79, 0x60, 0xab, 0xb2, 0xfa, 0x41, 0xba, 0xa7, 0x2a, 0x0c,
	0xe5, 0xbe, 0xad, 0xdd, 0x6b, 0x64, 0xc9, 0x53, 0x29, 0xbc, 0xa5, 0x95, 0x70, 0x47, 0x0b, 0x6b,
	0x48, 0x09, 0x3f, 0x03, 0x87, 0xad, 0xb7, 0xac, 0xa3, 0xd8, 0x0e, 0x5b, 0x6b, 0x8a, 0x80, 0x7d,
	0x17, 0x17, 0x77, 0x41, 0x57, 0x15, 0x55, 0x67, 0x89, 0x15, 0xf4, 0x27, 0x06, 0xa0, 0xae, 0xaa,
	0x33, 0x39, 0x85, 0x6e, 0x86, 0x09, 0x8d, 0xc5, 0x86, 0x61, 0xe0, 0x6a, 0x07, 0x3b, 0x80, 0x0c,
	0xc0, 0x5d, 0xe5, 0x19, 0xe3, 0x58, 0x14, 0x34, 0xbf, 0x0f, 0x8e, 0x14, 0xbf, 0x0f, 0x91, 0x17,
	0xe0, 0x65, 0x79, 0x42, 0xbf, 0x52, 0x4c, 0xb4, 0x0f, 0x4f, 0x15, 0x3f, 0x2a, 0x41, 0x69, 0x26,
	0xfc, 0x6d, 0xc8, 0xb6, 0x26, 0x32, 0x8f, 0xe6, 0x2e, 0x54, 0x11, 0x9a, 0xff, 0x8f, 0xd0, 0xda,
	0x8f, 0xb0, 0x96, 0x91, 0xf3, 0xcf, 0x8c, 0xec, 0xe6, 0x8c, 0x5a, 0x0d, 0x19, 0xb5, 0x1f, 0xca,
	0xa8, 0x53, 0xcb, 0x28, 0xf4, 0xe4, 0x84, 0xea, 0x6f, 0x63, 0xe9, 0x26, 0x3c, 0x05, 0x98, 0xa2,
	0x78, 0x68, 0xda, 0xbe, 0x80, 0xa3, 0x58, 0x39, 0x67, 0x87, 0xb3, 0x6b, 0xd4, 0x66, 0xf7, 0x50,
	0xd5, 0xac, 0x77, 0xa6, 0xf4, 0x69, 0x55, 0x3e, 0x5f, 0x7d, 0x80, 0x96, 0x4a, 0x8c, 0xb8, 0xd0,
	0x59, 0xce, 0x3e, 0xce, 0xe6, 0x9f, 0x67, 0xfe, 0x23, 0xf9, 0xf0, 0x3e, 0x9a, 0xbc, 0xbb, 0x9e,
	0x8c, 0x7d, 0x83, 0xf4, 0x00, 0xae, 0x66, 0x9f, 0xa2, 0xf9, 0x34, 0x9a, 0x2c, 0x16, 0xbe, 0x49,
	0xba, 0xd0, 0x9a, 0x44, 0xd1, 0x3c, 0xf2, 0x2d, 0xe2, 0x80, 0x3d, 0x9e, 0xcf, 0x26, 0xbe, 0x7d,
	0xf9, 0xcb, 0x84, 0xce, 0x42, 0xaf, 0x37, 0xb9, 0x80, 0xb6, 0xde, 0x57, 0x72, 0xa2, 0x7b, 0x72,
	0xb0, 0xe0, 0xfd, 0xc7, 0x87, 0xa0, 0xfc, 0xac, 0x0b, 0x68, 0xeb, 0x8d, 0x2d, 0xdf, 0x38, 0x58,
	0xe8, 0xf2, 0x8d, 0xfd, 0xa5, 0x7e, 0x03, 0x4e, 0xb9, 0x81, 0xe4, 0xa9, 0xa6, 0x6b, 0x5b, 0xdb,
	0x3f, 0xa9, 0xc3, 0x3b, 0x25, 0x99, 0x7c, 0xa5, 0xb4, 0x37, 0x63, 0x95, 0xd2, 0xae, 0x39, 0xe4,
	0x25, 0x58, 0x53, 0x14, 0xc4, 0xd7, 0x4c, 0xd5, 0xa7, 0x7e, 0x6f, 0x0f, 0x61, 0xe9, 0xe6, 0xb6,
	0xad, 0x7e, 0x6b, 0xaf, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x0b, 0x59, 0x30, 0xe7, 0x04,
	0x00, 0x00,
}
