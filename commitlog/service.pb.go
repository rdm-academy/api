// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package commitlog is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Commit
	Event
	CommitRequest
	CommitReply
	HistoryRequest
	HistoryReply
	PendingRequest
	PendingReply
*/
package commitlog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Commit struct {
	Id     string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Msg    string   `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Author string   `protobuf:"bytes,3,opt,name=author" json:"author,omitempty"`
	Time   int64    `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	Events []*Event `protobuf:"bytes,5,rep,name=events" json:"events,omitempty"`
	Parent string   `protobuf:"bytes,6,opt,name=parent" json:"parent,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Commit) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Commit) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Commit) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Commit) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Commit) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Commit) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

type Event struct {
	Project string `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	Id      string `protobuf:"bytes,6,opt,name=id" json:"id,omitempty"`
	Time    int64  `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Type    string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Author  string `protobuf:"bytes,4,opt,name=author" json:"author,omitempty"`
	Data    []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Event) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Event) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Event) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Event) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CommitRequest struct {
	Project string `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	Author  string `protobuf:"bytes,2,opt,name=author" json:"author,omitempty"`
	Msg     string `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
}

func (m *CommitRequest) Reset()                    { *m = CommitRequest{} }
func (m *CommitRequest) String() string            { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()               {}
func (*CommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CommitRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *CommitRequest) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *CommitRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type CommitReply struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *CommitReply) Reset()                    { *m = CommitReply{} }
func (m *CommitReply) String() string            { return proto.CompactTextString(m) }
func (*CommitReply) ProtoMessage()               {}
func (*CommitReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CommitReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type HistoryRequest struct {
	Project string `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	// The commit to fetch. It not specified, the latest commit is fetched.
	Commit string `protobuf:"bytes,2,opt,name=commit" json:"commit,omitempty"`
}

func (m *HistoryRequest) Reset()                    { *m = HistoryRequest{} }
func (m *HistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*HistoryRequest) ProtoMessage()               {}
func (*HistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HistoryRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *HistoryRequest) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

type HistoryReply struct {
	// The next commit (previous one in time).
	Next string `protobuf:"bytes,1,opt,name=next" json:"next,omitempty"`
	// The commit for this request.
	Commit *Commit `protobuf:"bytes,2,opt,name=commit" json:"commit,omitempty"`
}

func (m *HistoryReply) Reset()                    { *m = HistoryReply{} }
func (m *HistoryReply) String() string            { return proto.CompactTextString(m) }
func (*HistoryReply) ProtoMessage()               {}
func (*HistoryReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HistoryReply) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

func (m *HistoryReply) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

type PendingRequest struct {
	Project string `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
}

func (m *PendingRequest) Reset()                    { *m = PendingRequest{} }
func (m *PendingRequest) String() string            { return proto.CompactTextString(m) }
func (*PendingRequest) ProtoMessage()               {}
func (*PendingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PendingRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

type PendingReply struct {
	// The pending events.
	Events []*Event `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (m *PendingReply) Reset()                    { *m = PendingReply{} }
func (m *PendingReply) String() string            { return proto.CompactTextString(m) }
func (*PendingReply) ProtoMessage()               {}
func (*PendingReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PendingReply) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func init() {
	proto.RegisterType((*Commit)(nil), "commitlog.Commit")
	proto.RegisterType((*Event)(nil), "commitlog.Event")
	proto.RegisterType((*CommitRequest)(nil), "commitlog.CommitRequest")
	proto.RegisterType((*CommitReply)(nil), "commitlog.CommitReply")
	proto.RegisterType((*HistoryRequest)(nil), "commitlog.HistoryRequest")
	proto.RegisterType((*HistoryReply)(nil), "commitlog.HistoryReply")
	proto.RegisterType((*PendingRequest)(nil), "commitlog.PendingRequest")
	proto.RegisterType((*PendingReply)(nil), "commitlog.PendingReply")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcb, 0x4e, 0xeb, 0x30,
	0x10, 0x95, 0x93, 0x34, 0x55, 0xa7, 0x0f, 0xf5, 0x7a, 0xd1, 0xeb, 0x5b, 0xe9, 0x4a, 0x91, 0x57,
	0x81, 0x45, 0x17, 0x65, 0x83, 0x90, 0xd8, 0x80, 0x90, 0xd8, 0x20, 0xa1, 0xf4, 0x0b, 0x42, 0x63,
	0x15, 0xa3, 0x26, 0x0e, 0x89, 0x5b, 0xd1, 0x0f, 0xe0, 0x1f, 0xf8, 0x1f, 0x7e, 0x0c, 0xf9, 0x91,
	0x34, 0x29, 0x55, 0x61, 0x37, 0xe3, 0x99, 0x39, 0xe7, 0xcc, 0xc9, 0x04, 0x86, 0x25, 0x2b, 0xb6,
	0x7c, 0xc9, 0x66, 0x79, 0x21, 0xa4, 0xc0, 0xbd, 0xa5, 0x48, 0x53, 0x2e, 0xd7, 0x62, 0x45, 0x3f,
	0x10, 0xf8, 0xb7, 0x3a, 0xc3, 0x23, 0x70, 0x78, 0x42, 0x50, 0x80, 0xc2, 0x5e, 0xe4, 0xf0, 0x04,
	0x8f, 0xc1, 0x4d, 0xcb, 0x15, 0x71, 0xf4, 0x83, 0x0a, 0xf1, 0x04, 0xfc, 0x78, 0x23, 0x9f, 0x45,
	0x41, 0x5c, 0xfd, 0x68, 0x33, 0x8c, 0xc1, 0x93, 0x3c, 0x65, 0xc4, 0x0b, 0x50, 0xe8, 0x46, 0x3a,
	0xc6, 0x21, 0xf8, 0x6c, 0xcb, 0x32, 0x59, 0x92, 0x4e, 0xe0, 0x86, 0xfd, 0xf9, 0x78, 0x56, 0x93,
	0xce, 0xee, 0x54, 0x21, 0xb2, 0x75, 0x85, 0x9a, 0xc7, 0x05, 0xcb, 0x24, 0xf1, 0x0d, 0xaa, 0xc9,
	0xe8, 0x3b, 0x82, 0x8e, 0xee, 0xc4, 0x04, 0xba, 0x79, 0x21, 0x5e, 0xd8, 0x52, 0x5a, 0x79, 0x55,
	0x6a, 0x35, 0xfb, 0xb5, 0xe6, 0x4a, 0x89, 0xd3, 0x50, 0xa2, 0xde, 0x76, 0x39, 0xb3, 0x9a, 0x75,
	0xdc, 0xd8, 0xc4, 0x3b, 0xdc, 0x24, 0x89, 0x65, 0x4c, 0x3a, 0x01, 0x0a, 0x07, 0x91, 0x8e, 0xe9,
	0x02, 0x86, 0xc6, 0xa1, 0x88, 0xbd, 0x6e, 0x58, 0x79, 0x4a, 0xce, 0x1e, 0xd6, 0x69, 0xc1, 0x5a,
	0x2b, 0xdd, 0xda, 0x4a, 0xfa, 0x1f, 0xfa, 0x15, 0x68, 0xbe, 0xde, 0x1d, 0x7a, 0x4f, 0x6f, 0x60,
	0x74, 0xcf, 0x4b, 0x29, 0x8a, 0xdd, 0xaf, 0x48, 0x8d, 0xb5, 0x15, 0xa9, 0xc9, 0xe8, 0x03, 0x0c,
	0x6a, 0x0c, 0xc5, 0x81, 0xc1, 0xcb, 0xd8, 0x5b, 0x35, 0xae, 0x63, 0x7c, 0xd6, 0x9a, 0xed, 0xcf,
	0xff, 0x34, 0xbe, 0x92, 0xd5, 0x57, 0xc1, 0x9d, 0xc3, 0xe8, 0x91, 0x65, 0x09, 0xcf, 0x56, 0x3f,
	0x4a, 0xa2, 0x97, 0x30, 0xa8, 0x7b, 0x15, 0xf5, 0xfe, 0x18, 0xd0, 0xe9, 0x63, 0x98, 0x7f, 0x22,
	0xe8, 0x2e, 0xcc, 0xb1, 0xe2, 0xab, 0xfa, 0x34, 0xc9, 0x77, 0x59, 0x46, 0xc3, 0x74, 0x72, 0xa4,
	0xa2, 0x18, 0xaf, 0xa1, 0x6b, 0x97, 0xc7, 0xff, 0x1a, 0x2d, 0x6d, 0x53, 0xa7, 0x7f, 0x8f, 0x95,
	0xec, 0xb8, 0x5d, 0xa0, 0x35, 0xde, 0x36, 0xa0, 0x35, 0xde, 0xdc, 0xf7, 0xc9, 0xd7, 0xff, 0xd9,
	0xc5, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x45, 0xd6, 0x3e, 0x78, 0x03, 0x00, 0x00,
}
